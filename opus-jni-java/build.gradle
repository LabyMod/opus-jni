import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java-library'
}

group 'net.labymod'
version '1.0'

static def osDependentBinary(name) {
    return Os.isFamily(Os.FAMILY_WINDOWS) ? "${name}.exe" : name
}

static def findJavaH() {
    def javaHBinary = new File(System.getProperty("java.home"), "bin/${osDependentBinary("javah")}")
    if (javaHBinary.exists()) {
        return javaHBinary.absolutePath
    } else {
        javaHBinary = new File(System.getProperty("java.home"), "../bin/${osDependentBinary("javah")}")
        if(javaHBinary.exists()) {
            return javaHBinary.absolutePath
        }

        def path = System.getenv("PATH")
        if (path != null) {
            def paths = path.split(File.pathSeparator)
            for (def currentPath : paths) {
                javaHBinary = new File(currentPath, osDependentBinary("javah"))
                if (javaHBinary.exists()) {
                    return javaHBinary.absolutePath
                }
            }
        }
    }

    throw new GradleException("Failed to find javah required for header generation, " +
            "please put it on the PATH or run gradle with a JDK installation!")
}

def javaHCommand = findJavaH()

processResources {
    from(nativeBinaries) {
        into "native-binaries"
    }
}

compileJava {
    options.compilerArgs += ["-h", generatedHeadersDir.getAbsolutePath()]
}

OutputStream prefixedOutputStream(String prefix, OutputStream parentStream) {
    OutputStream ret = new OutputStream() {
        StringBuilder builder = new StringBuilder(prefix)

        @Override
        void write(int i) throws IOException {
            if (i as char == '\n' as char) {
                builder.append(i as char)
                parentStream.write(builder.toString().getBytes())
                parentStream.flush()
                builder.setLength(0)
                builder.append(prefix)
            } else {
                builder.append(i as char)
            }
        }
    }
    return ret
}